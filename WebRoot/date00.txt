1.日期的显示
方法1 
（1）在jsp中添加<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
（2）<fmt:formatDate value="${createTime }" pattern="yyyy-MM-dd HH:mm:ss"/>
方法2
添加get方法,在新的get方法中，使其返加值为格式化后字符串

----------------------------------------------------------------------------

2.如何让用户输入日期：一般显示一个小日历，让用户选择时间，而不是直接让用户输入
例：当前项目中：
（1）在页面中
	<link rel="stylesheet" type="text/css" href="css_js/calendar.css">
	<script type="text/javascript" src="css_js/jquery/jquery-1.3.2.min.js"></script>
	<script type="text/javascript" src="css_js/cal.js"></script>
（2）	 <input type="text" id="date1" readonly="readonly">
（3）	$(function(){
		$("#date1").simpleDatepicker({ startdate: 1960, enddate: 2060 });
	});
---------------------------------------------------------------------------

3.当页面的表单中有日期，如何传到后台（下面为springmvc时如何处理）	
方法1:html标签中name值对应实体类中set方法
（1）.html中
<input type="text" name="createTime2" id="time1" class="addTimeInit" value="点击显示时间列表" readonly="readonly">
（2）.实体类中添加方法
    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    public void setCreateTime2(String createTime){
        if(createTime!=null && !"".equals(createTime)){
            try{
                DateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd");
                this.createTime=dateformat.parse(createTime);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
    

方法2:使用@InitBinder注解

第一步:
import java.beans.PropertyEditorSupport;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DateEditor extends PropertyEditorSupport {  
    @Override  
    public void setAsText(String text) throws IllegalArgumentException {  
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");  
        Date date = null;  
        try {  
            date = format.parse(text);  
        } catch (ParseException e) {  
            format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
            try {  
                date = format.parse(text);  
            } catch (ParseException e1) {  
                e1.printStackTrace();  
            }  
        }  
        setValue(date);  
    }  
}


第二步:控制器中加入一段数据绑定代码
import java.util.Date;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import com.crm.model.Product;
import com.util.DateEditor;

@Controller
@RequestMapping("/product")
public class ProductController {
    @InitBinder  
    public void initBinder(WebDataBinder binder){  
        binder.registerCustomEditor(Date.class, new DateEditor());  
    }  

    @RequestMapping("/add")
    public ModelAndView add(Product product){
        System.out.println(product.getCreateTime());
        System.out.println("updateTime:::"+product.getUpdateTime());
        return null;
    }
}



方试3：使用ConverstionService

Spring3新引入了Converter系统，而ConversionService则是一个Facade类，
用来封装底层实现而对外提供便捷的类型转换。
1.实现Formatter接口
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.springframework.format.Formatter;

public class DateFormatter implements Formatter<Date> {  

    @Override  
    public String print(Date object, Locale locale) {  
        return null;  
    }  

    @Override  
    public Date parse(String text, Locale locale) throws ParseException {  
        System.out.println("DateFormatter.parse---------------------------------");
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
        Date date = null;  
        try {  
            date = format.parse(text);  
        } catch (Exception e) {  
            format = new SimpleDateFormat("yyyy-MM-dd");  
            date = format.parse(text);  
        }  
        return date;  
    }  
}  

2.将DateFormatter注册到一个ConversionService中，最后再将ConversionService注册到Spring MVC中。
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">  
        <property name="formatters">  
            <set>  
                <bean class="com.util.DateFormatter"></bean>
            </set>  
        </property>  
    </bean>

    <bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">  
        <property name="conversionService" ref="conversionService"></property>  
    </bean>

    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
        <property name="webBindingInitializer" ref="webBindingInitializer">  
        </property>  
    </bean> --><!-- 可不写 -->
